import 'package:http/http.dart' as http;\nimport 'dart:convert';\n\n// Define your API base URL for posts\nconst String _postBaseUrl = '/system/post'; // Adjust if needed\n\nclass PostApi {\n  // Constructor or dependency injection for http client if needed\n  // final http.Client _httpClient;\n  // PostApi(this._httpClient);\n\n  /// Updates post information.\n  Future<bool> updatePost(Map<String, dynamic> postData) async {\n    // TODO: Implement actual API call using http.put\n    print('Updating post via PUT $_postBaseUrl with data: $postData');\n    await Future.delayed(const Duration(milliseconds: 300));\n    return true;\n  }\n\n  /// Adds a new post.\n  Future<bool> addPost(Map<String, dynamic> postData) async {\n    // TODO: Implement actual API call using http.post\n    print('Adding post via POST $_postBaseUrl with data: $postData');\n    await Future.delayed(const Duration(milliseconds: 300));\n    return true;\n  }\n\n  /// Exports post data.\n  Future<dynamic> exportPosts(Map<String, dynamic>? queryParams) async {\n    // TODO: Implement actual API call using http.post (assuming export is POST)\n    print('Exporting posts via POST $_postBaseUrl/export with params: $queryParams');\n    await Future.delayed(const Duration(milliseconds: 500));\n    return {'fileContent': 'Mock exported post data'}; // Adjust return type based on actual API\n  }\n\n  /// Gets post information by ID.\n  Future<Map<String, dynamic>?> getPostInfo(int postId) async {\n    // TODO: Implement actual API call using http.get\n    print('Fetching post info from $_postBaseUrl/\$postId');\n    await Future.delayed(const Duration(milliseconds: 500));\n    return {'postId': postId, 'postName': 'Mock Post \$postId'}; // Adjust return structure\n  }\n\n  /// Gets post option select data.\n  Future<List<Map<String, dynamic>>> getPostOptionSelect() async {\n    // TODO: Implement actual API call using http.get\n    print('Fetching post option select data from $_postBaseUrl/optionselect');\n    await Future.delayed(const Duration(milliseconds: 500));\n    return [\n      {'value': 1, 'label': 'Option A'},\n      {'value': 2, 'label': 'Option B'},\n    ];\n  }\n\n  /// Gets a list of posts.\n   Future<List<Map<String, dynamic>>> getPostList({Map<String, dynamic>? queryParams}) async {\n    // TODO: Implement actual API call using http.get with query parameters\n    print('Fetching post list from $_postBaseUrl/list with params: $queryParams');\n    await Future.delayed(const Duration(milliseconds: 500));\n    return [\n      {'postId': 1, 'postName': 'Mock Post 1'},\n      {'postId': 2, 'postName': 'Mock Post 2'},\n    ];\n  }\n\n  /// Removes posts by IDs.\n  Future<bool> removePosts(List<int> postIds) async {\n    // TODO: Implement actual API call using http.delete\n    print('Removing posts from $_postBaseUrl/\${postIds.join(',')}');\n    await Future.delayed(const Duration(milliseconds: 300));\n    return true;\n  }\n}\n 